generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PizzaBase {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  price       Decimal     @db.Decimal(10, 2)
  isAvailable Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]

  @@map("pizza_bases")
}

model PizzaSize {
  id          String      @id @default(cuid())
  name        String      @unique
  inches      Int
  price       Decimal     @db.Decimal(10, 2)
  isAvailable Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]

  @@map("pizza_sizes")
}

model Topping {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  price       Decimal     @db.Decimal(10, 2)
  isAvailable Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItemTopping[]

  @@map("toppings")
}

model Order {
  id           String      @id @default(cuid())
  customerName String
  customerEmail String?
  customerPhone String?
  status       OrderStatus @default(PENDING)
  totalAmount  Decimal     @db.Decimal(10, 2)
  notes        String?
  isDeleted    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderItems   OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String    @id @default(cuid())
  orderId   String
  baseId    String
  sizeId    String
  quantity  Int       @default(1)
  unitPrice Decimal  @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  base      PizzaBase @relation(fields: [baseId], references: [id])
  size      PizzaSize @relation(fields: [sizeId], references: [id])
  toppings  OrderItemTopping[]

  @@map("order_items")
}

model OrderItemTopping {
  id          String    @id @default(cuid())
  orderItemId String
  toppingId   String
  quantity    Int       @default(1)
  unitPrice   Decimal   @db.Decimal(10, 2)
  totalPrice  Decimal   @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  topping     Topping   @relation(fields: [toppingId], references: [id])

  @@unique([orderItemId, toppingId])
  @@map("order_item_toppings")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}
